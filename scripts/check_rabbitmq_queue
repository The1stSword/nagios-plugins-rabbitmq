#!/usr/bin/env perl
#
# check_rabbitmq_overview
#
# Use the management APIs to check a queue
#
use strict;
use warnings;

use Nagios::Plugin qw(OK CRITICAL WARNING UNKNOWN);
use Nagios::Plugin::Functions qw(%STATUS_TEXT);
use LWP::UserAgent;
use URI::Escape;
use JSON;

use vars qw($VERSION $PROGNAME  $verbose $timeout);
$VERSION = '1.0';

# get the base name of this script for use in the examples
use File::Basename;
$PROGNAME = basename($0);

################
#
# Create a new Nagios::Plugin object.
#
# 
#
###############
my $plugin = Nagios::Plugin->new(
    usage => "Usage: %s [options] -H hostname",
    license => "",
    version => $VERSION,
    blurb => 'This plugin uses the RabbitMQ management API to monitor a specific queue.',
);

$plugin->add_arg(spec => 'hostname|host|H=s',
    help => "Specify the host to connect to",
    required => 1
);
$plugin->add_arg(spec => 'port=i',
    help => "Specify the port to connect to (default: %s)",
    default => 15672
);

$plugin->add_arg(spec => 'username|user|u=s',
    help => "Username (default: %s)",
    default => "guest",
);
$plugin->add_arg(spec => 'password|p=s',
    help => "Password (default: %s)",
    default => "guest"
);

$plugin->add_arg(spec => 'vhost=s',
    help => "Specify the vhost where the queue resides (default: %s)",
    default => "/"
);
$plugin->add_arg(spec => 'queue=s',
    help => "Specify the queue to check",
    required => 1
);


$plugin->add_arg(
    spec => 'warning|w=s',
    help =>
qq{-w, --warning=THRESHOLD[,THRESHOLD[,THRESHOLD[,THRESHOLD]]]
   Warning thresholds specified in order that the metrics are returned.
   Specify -1 if no warning threshold.},

);

$plugin->add_arg(
    spec => 'critical|c=s',
    help =>
qq{-c, --critical=THRESHOLD[,THRESHOLD[,THRESHOLD[,THRESHOLD]]]
   Critical thresholds specified in order that the metrics are returned.
   Specify -1 if no critical threshold.},
);

$plugin->add_arg(spec => 'ssl|ssl!',
    help => "Use SSL (default: false)",
    default => 0
);

$plugin->add_arg(spec => 'proxy|proxy!',
    help => "Use environment proxy (default: true)",
    default => 1
);

# Parse arguments and process standard ones (e.g. usage, help, version)
$plugin->getopts;

####################################################################################
#
# A hash is a special kind of array - an associative array, or paired group of elements. Perl hash names are prefixed with a percent sign (%), and consist of pairs of elements - a key and a data value.
#
#     Hash Name     key        value
#     %critical  = ( "messages",         "200",
#                  "ack_less_than",    ".10",
#                  "ack_greater_than", "20"   );
#
#     This hash consists of a check name for the key, and their checked value as the data element. You refer to the individual elements of the hash with a $ sign
#
#         $pages{'fred'}
#
#
######################################################################################
#
# perform sanity checking on command line options
my %warning;
if (defined $plugin->opts->warning) {
    # warning array, split each variable in the array by parsing the comma in the command line options
    my @warning = split(',', $plugin->opts->warning);
    $plugin->nagios_die("You should specify 1 to 3 ranges for --warning argument, 1. Messages 2. Ack per second lower bounds  3.Acks per second upper bound") unless $#warning < 3;

#
# Modify options for Total Messages, and Acks per second range
#
    $warning{'messages'} = shift @warning;
    $warning{'ack_details'} = shift @warning;
}

my %critical;
if (defined $plugin->opts->critical) {
    my @critical = split(',', $plugin->opts->critical);
    $plugin->nagios_die("You should specify specify 1 to 3 ranges for --critical argument, 1. Messages 2. Ack per second lower bounds  3.Acks per second upper bound ") unless $#critical < 3;

    $critical{'messages'} = shift @critical;
    $critical{'ack_details'} = shift @critical;
}


##############################################################################
# check stuff.

my $hostname=$plugin->opts->hostname;
my $port=$plugin->opts->port;
my $vhost=uri_escape($plugin->opts->vhost);
my $queue=$plugin->opts->queue;

my $ua = LWP::UserAgent->new(env_proxy => $plugin->opts->proxy);
$ua->agent($PROGNAME.' ');
$ua->timeout($plugin->opts->timeout);
# Different security domains in 2.5 and 2.6
$ua->credentials("$hostname:$port",
    "Management: Web UI", $plugin->opts->username, $plugin->opts->password);
$ua->credentials("$hostname:$port",
    "RabbitMQ Management", $plugin->opts->username, $plugin->opts->password);


my $url = sprintf("http%s://%s:%d/api/queues/%s/%s", ($plugin->opts->ssl ? "s" : ""), $hostname, $port, $vhost, $queue);
my ($retcode, $result) = request($url);

if ($retcode != 200) {
    $plugin->nagios_exit(CRITICAL, "$result : $url");
}

my @metrics = ("messages");
for my $metric (@metrics) {
    
    my $warning = undef;
    $warning = $warning{$metric} if (defined $warning{$metric} and $warning{$metric} ne -1);
    
    my $critical = undef;
    $critical = $critical{$metric} if (defined $critical{$metric} and $critical{$metric} ne -1);

    my $value = 0;
    $value = $result->{$metric} if defined $result->{$metric};

    my $code = $plugin->check_threshold(check => $value, warning => $warning, critical=> $critical);
    $plugin->add_message($code, sprintf("$metric ".$STATUS_TEXT{$code}." (%d)", $value)) ;
    $plugin->add_perfdata(label=>$metric, value => $value, warning=>$warning, critical=> $critical);
}

my @stats = ("ack_details");
for my $metric (@stats) {
    
    my $warning = undef;
    $warning = $warning{$metric} if (defined $warning{$metric} and $warning{$metric} ne -1);
    
    my $critical = undef;
    $critical = $critical{$metric} if (defined $critical{$metric} and $critical{$metric} ne -1);

    my $value = $result->{message_stats}{$metric}{rate};
    $value = 0 unless defined $value;

    

    
    my $code = $plugin->check_threshold(check => $value, warning => $warning, critical=> $critical);
    $plugin->add_message($code, sprintf("$metric ".$STATUS_TEXT{$code}." (%d)", $value)) ;
    $plugin->add_perfdata(label=>$metric, value => $value, warning=>$warning, critical=> $critical);
}

my ($code, $message) = $plugin->check_messages(join_all=>', ');
$plugin->nagios_exit(return_code => $code, message => $message);


sub request {
    my ($url) = @_;
    my $req = HTTP::Request->new(GET => $url);
    my $res = $ua->request($req);

    if (!$res->is_success) {
        # Deal with standard error conditions - make the messages more sensible
        if ($res->code == 400) {
            my $bodyref = decode_json $res->content;
            return (400, $bodyref->{'reason'});

        }
        $res->code == 404 and return (404, "Not Found");
        $res->code == 401 and return (401, "Access Refused");
        $res->status_line =~ /Can\'t connect/ and return (500, "Connection Refused : $url");
        if ($res->code < 200 or $res->code > 400 ) {
            return ($res->code, "Received ".$res->status_line);
        }
    }
    my $bodyref = decode_json $res->content;
    printf("$res->content\n\n");
    return($res->code, $bodyref);
}

=head1 NAME

check_rabbitmq_queue - Nagios plugin using RabbitMQ management API to
count the messages pending and consumers on a given queue

=head1 SYNOPSIS

check_rabbitmq_overview [options] -H hostname

=head1 DESCRIPTION

Use the management interface of RabbitMQ to count the number of pending,
ready and unacknowledged messages and number of consumers.  These are
published as performance metrics for the check.

Critical and warning thresholds can be set for each of the metrics.

It uses Nagios::Plugin and accepts all standard Nagios options.

=head1 OPTIONS

=over

=item -h | --help

Display help text

=item -v | --verbose

Verbose output

=item -t | --timeout

Set a timeout for the check in seconds

=item -H | --hostname | --host

The host to connect to

=item --port

The port to connect to (default: 55672)

=item --ssl

Use SSL when connecting (default: false)

=item --username | --user

The user to connect as (default: guest)

=item --pass

The password for the user (default: guest)

=item -w | --warning

The warning levels for each count of messages, messages_ready,
messages_unacknowledged and consumers.  This field consists of
one to four comma-separated thresholds.  Specify -1 if no threshold
for a particular count.

=item -c | --critical

The critical levels for each count of messages, messages_ready,
messages_unacknowledged and consumers.  This field consists of
one to four comma-separated thresholds.  Specify -1 if no threshold
for a particular count.

=back

=head1 THRESHOLD FORMAT

The format of thresholds specified in --warning and --critical arguments
is defined at <http://nagiosplug.sourceforge.net/developer-guidelines.html#THRESHOLDFORMAT>.

For example to be crtical if more than 100 messages, more than 90 messages_ready,
more than 20 messages_unacknowledged or no fewer than 10 consumers use

--critical=100,90,20,10:

=head1 EXAMPLES

The defaults all work with a standard fresh install of RabbitMQ, and all that
is needed is to specify the host to connect to:

    check_rabbitmq_queue -H rabbit.example.com

This returns a standard Nagios result:

    RABBITMQ_OVERVIEW OK - messages OK (25794) messages_ready OK (22971)
      messages_unacknowledged OK (2823) consumers OK (10) | messages=25794;;
      messages_ready=22971;; messages_unacknowledged=2823;; consumers=10;;

=head1 ERRORS

The check tries to provide useful error messages on the status line for
standard error conditions.

Otherwise it returns the HTTP Error message returned by the management
interface.

=head1 EXIT STATUS

Returns zero if check is OK otherwise returns standard Nagios exit codes to
signify WARNING, UNKNOWN or CRITICAL state.

=head1 SEE ALSO

See Nagios::Plugin(3)

The RabbitMQ management plugin is described at
http://www.rabbitmq.com/management.html

=head1 LICENSE

This file is part of nagios-plugins-rabbitmq.

Copyright 2010, Platform 14.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=head1 AUTHOR

James Casey <jamesc.000@gmail.com>

=cut

1;
